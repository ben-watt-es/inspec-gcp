# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/cloudfunctions/property/cloudfunction_event_trigger'
require 'google/cloudfunctions/property/cloudfunction_https_trigger'
require 'google/cloudfunctions/property/cloudfunction_source_repository'

# A provider to manage Cloud Functions resources.
class CloudFunctionsCloudFunction < GcpResourceBase
  name 'google_cloudfunctions_cloud_function'
  desc 'CloudFunction'
  supports platform: 'gcp'

  attr_reader :params, :name, :description, :status, :entry_point, :runtime, :timeout, :available_memory_mb, :service_account_email, :update_time, :version_id, :labels, :environment_variables, :source_archive_url, :source_upload_url, :source_repository, :https_trigger, :event_trigger, :location

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url(params[:beta]), resource_base_url, params, 'Get')
    parse unless @fetched.nil?
  end

  def parse
    @name = @fetched['name']
    @description = @fetched['description']
    @status = @fetched['status']
    @entry_point = @fetched['entryPoint']
    @runtime = @fetched['runtime']
    @timeout = @fetched['timeout']
    @available_memory_mb = @fetched['availableMemoryMb']
    @service_account_email = @fetched['serviceAccountEmail']
    @update_time = @fetched['updateTime']
    @version_id = @fetched['versionId']
    @labels = @fetched['labels']
    @environment_variables = @fetched['environmentVariables']
    @source_archive_url = @fetched['sourceArchiveUrl']
    @source_upload_url = @fetched['sourceUploadUrl']
    @source_repository = GoogleInSpec::CloudFunctions::Property::CloudFunctionSourceRepository.new(@fetched['sourceRepository'], to_s)
    @https_trigger = GoogleInSpec::CloudFunctions::Property::CloudFunctionHttpsTrigger.new(@fetched['httpsTrigger'], to_s)
    @event_trigger = GoogleInSpec::CloudFunctions::Property::CloudFunctionEventTrigger.new(@fetched['eventTrigger'], to_s)
    @location = @fetched['location']
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "CloudFunction #{@params[:name]}"
  end

  private

  def product_url(_ = nil)
    'https://cloudfunctions.googleapis.com/v1/'
  end

  def resource_base_url
    'projects/{{project}}/locations/{{location}}/functions/{{name}}'
  end
end
